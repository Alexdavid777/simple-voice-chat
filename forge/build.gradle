apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'
apply plugin: 'mod-update'

apply from: "https://raw.githubusercontent.com/henkelmax/mod-gradle-scripts/${mod_gradle_script_version}/mod.gradle"

processResources {
    filesMatching('**/*.info') {
        expand 'mod_version': mod_version,
                'minecraft_version': minecraft_version
    }
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.3-SNAPSHOT:processor'
    minecraftLibrary 'org.spongepowered:mixin:0.8.3-SNAPSHOT'
    shadow 'org.spongepowered:mixin:0.8.3-SNAPSHOT'

    implementation 'org.jetbrains:annotations:23.0.0'

    minecraftLibrary "org.concentus:Concentus:${concentus_version}"
    shadow "org.concentus:Concentus:${concentus_version}"

    minecraftLibrary "de.maxhenkel.opus4j:opus4j:${opus4j_version}"
    shadow "de.maxhenkel.opus4j:opus4j:${opus4j_version}"

    minecraftLibrary "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"
    shadow "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"

    minecraftLibrary "de.maxhenkel.lame4j:lame4j:${lame4j_version}"
    shadow "de.maxhenkel.lame4j:lame4j:${lame4j_version}"
}

tasks.register('generateJava', Copy) {
    from project(':common').file('src/template/java')
    into "${layout.buildDirectory.asFile.get()}/generated/java"
    expand 'compatibility_version': voicechat_compatibility_version
}
sourceSets.main.java {
    srcDir "${layout.buildDirectory.asFile.get()}/generated/java"
}
compileJava.dependsOn generateJava

shadowJar {
    relocate 'org.concentus', 'de.maxhenkel.voicechat.concentus'
}

legacy {
    fixClasspath = false
}

mixin {
    add sourceSets.main, "voicechat.refmap.json"
    config "voicechat.mixins.json"
}

minecraft {
    runs {
        client {
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }
        server {
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(['FMLCorePluginContainsFMLMod': 'true',
                    'ForceLoadAsMod'             : 'true',
                    'TweakClass'                 : 'org.spongepowered.asm.launch.MixinTweaker',
                    'TweakOrder'                 : '0'
        ])
    }
}

// https://stackoverflow.com/a/70151634/9889252
idea {
    module {
        inheritOutputDirs = true
    }
}
tasks.register('prepareAssets', Copy) {
    group = 'build'
    from project(":common").file('src/main/resources')
    into project.file('build/classes/java/main')
}
classes.dependsOn(prepareAssets)

tasks.register('prepareWorkspace') {

}
