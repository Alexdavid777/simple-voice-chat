plugins {
    id 'net.neoforged.gradle.userdev' version '7.0.+'
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
    id 'com.modrinth.minotaur' version "${minotaur_version}"
    id 'mod-update' version "${mod_update_version}"
}

archivesBaseName = project.archives_base_name
version = mod_version
group = mod_packagename

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version as int)

runs {
    client {
        workingDirectory project.file('run')
        systemProperty 'forge.logging.console.level', 'debug'
        programArguments = ['--username', "henkelmax${new Random().nextInt(1000)}"]
        modSource project.sourceSets.main
    }
    server {
        workingDirectory project.file('run/server')
        systemProperty 'forge.logging.console.level', 'debug'
        programArgument '--nogui'
        modSource project.sourceSets.main
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
    maven { url = 'https://maven.shedaniel.me/' }
    maven { url = 'https://maven.minecraftforge.net/' }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.register('prepareWorkspace') {

}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    implementation(project(path: ':common', configuration: 'namedElements')) {
        transitive false
    }
    shadow(project(path: ':common', configuration: 'namedElements')) {
        transitive false
    }

    compileOnly "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"

    implementation 'org.jetbrains:annotations:23.0.0'

    implementation "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
    shadow "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"

    implementation "de.maxhenkel.opus4j:opus4j:${opus4j_version}"
    shadow "de.maxhenkel.opus4j:opus4j:${opus4j_version}"

    implementation "org.concentus:Concentus:${concentus_version}"
    shadow "org.concentus:Concentus:${concentus_version}"

    implementation "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"
    shadow "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"

    implementation "de.maxhenkel.lame4j:lame4j:${lame4j_version}"
    shadow "de.maxhenkel.lame4j:lame4j:${lame4j_version}"

    implementation(project(':api')) {
        transitive false
    }
    shadow(project(':api')) {
        transitive false
    }
}

tasks.register('generateJava', Copy) {
    from project(':common').file('src/template/java')
    into "${buildDir}/generated/java"
    expand 'compatibility_version': mod_compatibility_version
}
sourceSets.main.java {
    srcDir "${buildDir}/generated/java"
}
compileJava.dependsOn generateJava

processResources {
    filesMatching('**/*.toml') {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_name': mod_name,
                'neoforge_loader_requirement': neoforge_loader_requirement,
                'neoforge_requirement': neoforge_requirement,
                'minecraft_version': minecraft_version,
                'cloth_config_version': cloth_config_version
    }
    from("${project(':common').projectDir}/src/main/resources")
}

// TODO Check
/*tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
    source(project(':api').sourceSets.main.allSource)
}*/

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(['Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_vendor,
                    'Specification-Version'   : "1",
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_vendor,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from configurations.shadow.collect { it.isDirectory() ? it : zipTree(it) }
}

tasks.register('deobfJar', Jar) {
    archiveClassifier = 'deobf'
    from sourceSets.main.output
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file('changelog.md')
        releaseType = release_type
        addGameVersion minecraft_version
        addGameVersion 'NeoForge'
        addGameVersion "Java ${java_version}"
        mainArtifact(jar) {
            displayName = "[NEOFORGE][${minecraft_version}] ${mod_name} ${mod_version}"
            relations {
                optionalDependency 'sound-physics-remastered'
                optionalDependency 'cloth-config'
            }
        }
    }
}
tasks.curseforge.dependsOn(shadowJar)

tasks.modrinth.configure({
    group = 'upload'
})

modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = modrinth_id
    versionNumber = "neoforge-${mod_version}"
    versionName = "${mod_name} ${mod_version}"
    uploadFile = jar
    versionType = release_type.toUpperCase()
    changelog = file('changelog.md').text
    gameVersions = [minecraft_version]
    loaders = ['neoforge']
    dependencies {
        optional.project '9s6osm5g' // ClothConfig
    }
}
tasks.modrinth.dependsOn(shadowJar)

modUpdate {
    serverURL = 'https://update.maxhenkel.de/'
    modID = mod_id
    gameVersion = minecraft_version
    modLoader = 'neoforge'
    modVersion = mod_version
    changelogFile = file('changelog.md')
    releaseType = release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier = ''
    relocate 'de.maxhenkel.configbuilder', "de.maxhenkel.${mod_id}.configbuilder"
    relocate 'org.concentus', "de.maxhenkel.${mod_id}.concentus"
    dependencies {
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }
}
jar.finalizedBy('shadowJar')